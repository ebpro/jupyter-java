import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.io.InputStream;
import java.util.function.Consumer;
import java.util.concurrent.Future;
import io.github.spencerpark.ijava.IJava;
import io.github.spencerpark.ijava.JavaKernel;
import io.github.spencerpark.jupyter.kernel.magic.registry.UndefinedMagicException;
import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.CompilationUnit;


/**
%%javasrcMethodByAnnotationName Test POST 
/src/Test.java
*/
IJava.getKernelInstance().getMagics().registerCellMagic("javasrcMethodByAnnotationName", (args, body) -> {
    String filename=body;
    String className=args.get(0);
    String annotationName=args.get(1);
    int index=args.size()==3?Integer.valueOf(args.get(2)):0;
    CompilationUnit cu = StaticJavaParser.parse(Files.readString(Path.of(filename)));
            String out = cu.getClassByName(className).get()
                .getMethods()
                .stream()
                .filter(m -> m.getAnnotations().stream().anyMatch(a -> a.getNameAsString().equals(annotationName)))                
                .skip(index)
                .findFirst().get().toString();
     out = "```java\n"+out+"\n```";
     display(out,"text/markdown");
     return out;
});

/**
%%javasrcMethodByName Test getAll 
/src/Test.java
*/
IJava.getKernelInstance().getMagics().registerCellMagic("javasrcMethodByName", (args, body) -> {
    String filename=body;
    String className=args.get(0);
    String methodName=args.get(1);
    int index=args.size()==3?Integer.valueOf(args.get(2)):0;
    CompilationUnit cu = StaticJavaParser.parse(Files.readString(Path.of(filename)));
            String out = cu.getClassByName(className).get()
                .getMethodsByName(methodName)                
                .get(index)
                .toString();
     out = "```java\n"+out+"\n```";
     display(out,"text/markdown");
     return out;
});

/**
%%javasrcClassByName Test 
/src/Test.java
*/
IJava.getKernelInstance().getMagics().registerCellMagic("javasrcClassByName", (args, body) -> {
    String filename=body;
    String className=args.get(0);
    CompilationUnit cu = StaticJavaParser.parse(Files.readString(Path.of(filename)));
            String out = cu.getClassByName(className).get()
                .toString();
     out = "```java\n"+out+"\n```";
     display(out,"text/markdown");
     return out;
});
