import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.io.InputStream;
import java.util.function.Consumer;
import java.util.concurrent.Future;
import io.github.spencerpark.ijava.IJava;
import io.github.spencerpark.ijava.JavaKernel;
import io.github.spencerpark.jupyter.kernel.magic.registry.UndefinedMagicException;
import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.CompilationUnit;

import com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter;

import javax.tools.JavaFileObject;
import io.github.spencerpark.jupyter.kernel.magic.registry.MagicsArgs;
import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import javax.tools.StandardJavaFileManager;
import java.util.stream.Collectors;
import io.github.classgraph.ClassGraph;

import net.sourceforge.plantuml.SourceStringReader;
import net.sourceforge.plantuml.core.DiagramDescription;
import net.sourceforge.plantuml.FileFormatOption;
import net.sourceforge.plantuml.FileFormat;
import java.nio.charset.Charset;
import javax.imageio.ImageIO;


/**
%%javasrcMethodByAnnotationName Test POST 
/src/Test.java
*/
IJava.getKernelInstance().getMagics().registerCellMagic("javasrcMethodByAnnotationName", (args, body) -> {
    String filename=body;
    String className=args.get(0);
    String annotationName=args.get(1);
    int index=args.size()==3?Integer.valueOf(args.get(2)):0;
    CompilationUnit cu = StaticJavaParser.parse(Files.readString(Path.of(filename)));
            String out = cu.getClassByName(className).get()
                .getMethods()
                .stream()
                .filter(m -> m.getAnnotations().stream().anyMatch(a -> a.getNameAsString().equals(annotationName)))                
                .skip(index)
                .findFirst().get().toString();
     out = "```Java\n"+out+"\n```";
     display(out,"text/markdown");
     return out;
});

/**
%%javasrcMethodByName Test getAll 
/src/Test.java
*/
IJava.getKernelInstance().getMagics().registerCellMagic("javasrcMethodByName", (args, body) -> {
    String filename=body;
    String className=args.get(0);
    String methodName=args.get(1);
    int index=args.size()==3?Integer.valueOf(args.get(2)):0;
    CompilationUnit cu = StaticJavaParser.parse(Files.readString(Path.of(filename)));
            String out = cu.getClassByName(className).get()
                .getMethodsByName(methodName)                
                .get(index)
                .toString();
     out = "```Java\n"+out+"\n```";
     display(out,"text/markdown");
     return out;
});


IJava.getKernelInstance().getMagics().registerCellMagic("javasrcInterfaceByName", (args, body) -> {
    final String path=args.get(0);
    final String filename=path+"/"+body.replace(".","/")+".java";
    final String className=body.substring(body.lastIndexOf('.') + 1);
    CompilationUnit cu = StaticJavaParser.parse(Files.readString(Path.of(filename)));
    String out = cu.getInterfaceByName(className).get()
                .toString();
     //out = "```Java\n"+out+"\n```";
    out = "```{.java fig-cap=\"TEST\",filename=\""+filename.substring(filename.lastIndexOf('/') + 1)+"\"}\n"+out+"\n```";
     display(out,"text/markdown");
     return out;
});

/**
%%javasrcClassByName Test 
/src/Test.java
*/

IJava.getKernelInstance().getMagics().registerCellMagic("javasrcClassByName", (args, body) -> {
    String filename=body;
    String className=args.get(0);
    CompilationUnit cu = StaticJavaParser.parse(Files.readString(Path.of(filename)));
    CompilationUnit lpp = LexicalPreservingPrinter.setup(cu);

    String out = LexicalPreservingPrinter.print(lpp.getClassByName(className).get());
                
    out = "```Java\n"+out+"\n```";
    display(out,"text/markdown");
    return out;
});


/**
%%compile fr/univtln/bruno/Test.java
package fr.univtln.bruno;

import lombok.*;           

@Setter
@Getter         
@ToString
@AllArgsConstructor(staticName="of")
@NoArgsConstructor
public class Test {
 private int x;
 private int y;
    private int z;
}
*/
IJava.getKernelInstance().getMagics().registerCellMagic("compile",(args,body)->{
    try{
        //We parse the magics arguments
        MagicsArgs schema=MagicsArgs.builder()
        .required("filePath")
        //.optional("x")
        //.keyword("from", MagicsArgs.KeywordSpec.ONCE)
        //.flag("verbose", 'v',"true")
        .onlyKnownKeywords()
        .onlyKnownFlags()
        .build();
        Map<String, List<String>>params=schema.parse(args);
        //display(params);
        Map<String, List<String>>vals=schema.parse(args);
        
        //We create the tmp dit if necessary
//            File tempDirectory = Files.createTempDirectory("jupyterJava").toFile();
        File tempDirectory=new File("/tmp/jupyterJava");
        String filename = vals.get("filePath").get(0);
        File file=new File(tempDirectory,filename);
        Files.createDirectories(file.getParentFile().toPath());
        BufferedWriter writer=new BufferedWriter(new FileWriter(file));
        writer.write(body);
        writer.close();
        JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
        StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);
        Iterable<?extends JavaFileObject> compilationUnits1=
        fileManager.getJavaFileObjectsFromFiles(Arrays.asList(new File[]{file}));

        //We use the ClassGraph reflection API
        List<URI> classpath = new ClassGraph().getClasspathURIs();
        List<String> optionList=new ArrayList<String>();
        optionList.addAll(Arrays.asList("-cp",classpath.stream().map(URI::toString).collect(Collectors.joining(":"))));
        optionList.addAll(Arrays.asList("--enable-preview","--release",System.getProperty("java.version").split("[.]")[0], "-proc:full","-implicit:class"));
        compiler.getTask(null,fileManager,null,optionList,null,compilationUnits1).call();
        //display("Compilation of "+file);
        
        IJava.getKernelInstance().addToClasspath(tempDirectory.toString());
        
        //display("added to classpath "+tempDirectory.toString());
        
        //String className=filename.substring(0,filename.lastIndexOf(".")).replace("/",".");        
        //display("Loading class "+className);
        //ClassLoader parentClassloader=((URLClassLoader)(Thread.currentThread().getContextClassLoader()));
        //Thread.currentThread().setContextClassLoader(URLClassLoader.newInstance(new URL[]{tempDirectory.toURI().toURL()}, parentClassloader));
        //URLClassLoader.newInstance(new URL[]{tempDirectory.toURI().toURL()}, parentClassloader).loadClass(className);
        //parentClassloader.loadClass(className);
        //display("Loaded");
        
    } catch(IOException e){ throw new RuntimeException(e);}
    return "ok";
});
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.*;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;


    private static class Field {
        private final String name;

        private final String size;
        private final String type;
        private final boolean nullable;
        private final boolean autoincrement;
        private Role role = Role.COLUMN;


        private Field(String name, String size, String type, boolean nullable, boolean autoincrement) {
            this.name = name;
            this.size = size;
            this.type = type;
            this.nullable = nullable;
            this.autoincrement = autoincrement;
        }

        public static Field of(String name, String size, String type, boolean nullable, boolean autoincrement) {
            return new Field(name, size, type, nullable, autoincrement);
        }

        public String toString() {
            return String.format("%s %s(%s): %s(%s)", nullable ? "" : "*", role.name, name, type, size);
        }

        public String getName() {
            return this.name;
        }

        public String getSize() {
            return this.size;
        }

        public String getType() {
            return this.type;
        }

        public boolean isNullable() {
            return this.nullable;
        }

        public boolean isAutoincrement() {
            return this.autoincrement;
        }

        public Role getRole() {
            return this.role;
        }

        public void setRole(Role role) {
            this.role = role;
        }

        public enum Role {
            COLUMN("column"),
            PK("primary_key"),
            FK("foreign_key");
            private final String name;

            Role(String name) {
                this.name = name;
            }

            public String getName() {
                return this.name;
            }
        }
    }

    private static class Table {

        private static int nextnum = 1;

        private String name;
        private int id = nextnum++;
        private Map<String, Field> fields = new TreeMap<>();

        public Map<String, Field> getFields() {return fields;}
        
        public Table(String tableName) {
            this.name = tableName;
        }

        public String toString() {
            return "table("+name+") {\n"+ 
                    this.getFields().values().stream().filter(f -> f.getRole() == Field.Role.PK).map(Object::toString).map(s -> "\t" + s).collect(Collectors.joining("\n"))+
                    "\n--\n"+
                    this.getFields().values().stream().filter(f -> f.getRole() != Field.Role.PK).map(Object::toString).map(s -> "\t" + s).collect(Collectors.joining("\n"))+
                    "\n}\n";
        }
    }


IJava.getKernelInstance().getMagics().registerCellMagic("rdbmsSchema", (args, body) -> {
    
        //sets the results mimetype
        if (args.size()>5 || args.size()<2) throw new Exception("Usage: jdbcURL user password [SCHEMA] [SVG|PNG]");
        String fileFormat;
        String schema;
        if (args.size()==3) schema="PUBLIC";
          else schema=args.get(3);
        if (args.size()<=4) fileFormat="SVG";
          else fileFormat=args.get(4);

    
        Connection connection = DriverManager.getConnection(args.get(0),args.get(1),args.get(2));
    
         DatabaseMetaData databaseMetaData = connection.getMetaData();

        StringWriter out = new StringWriter();
    
        out.write("""
                @startuml
                 
                 left to right direction
                 skinparam roundcorner 5                    
                 skinparam shadowing true
                 skinparam handwritten false
                 skinparam class {
                     BackgroundColor #EEEEEE
                     ArrowColor #2688d4
                     BorderColor #2688d4
                 }
                 
                 !define primary_key(x) <b><color:#b8861b><&key></color> x</b>
                 !define foreign_key(x) <color:#aaaaaa><&key></color> x
                 !define column(x) <color:#efefef><&media-record></color> x
                 !define table(x) entity x << (T, white) >>
                 
                """);
        String[] bodylines=body.split("\n");                  
        for(String bodyline:bodylines)
         try (ResultSet resultSet = databaseMetaData.getTables(null, schema, bodyline, new String[]{"TABLE"})) {
            while (resultSet.next()) {
                String tableName = resultSet.getString("TABLE_NAME");
                String remarks = resultSet.getString("REMARKS");

                Table table = new Table(tableName);

                //First process each column
                try (ResultSet columns = databaseMetaData.getColumns(null, schema, tableName, null)) {
                    while (columns.next()) {
                        String columnName = columns.getString("COLUMN_NAME");
                        table.getFields().put(columnName, Field.of(columnName,
                                columns.getString("COLUMN_SIZE"),
                                columns.getString("TYPE_NAME"),
                                columns.getString("IS_NULLABLE").equals("YES"),
                                columns.getString("IS_AUTOINCREMENT").equals("YES")));
                    }
                }

                //Then finetune each PK
                try (ResultSet primaryKeys = databaseMetaData.getPrimaryKeys(null, schema, tableName)) {
                    while (primaryKeys.next()) {
                        String primaryKeyColumnName = primaryKeys.getString("COLUMN_NAME");
                        String primaryKeyName = primaryKeys.getString("PK_NAME");
                        table.getFields().get(primaryKeyColumnName).setRole(Field.Role.PK);
                    }
                }

                StringBuilder foreignKeysText = new StringBuilder();
                //And Adds a link for each FK
                try (ResultSet foreignKeys = databaseMetaData.getImportedKeys(null, schema, tableName)) {
                    while (foreignKeys.next()) {
                        String pkTableName = foreignKeys.getString("PKTABLE_NAME");
                        String fkTableName = foreignKeys.getString("FKTABLE_NAME");
                        String pkColumnName = foreignKeys.getString("PKCOLUMN_NAME");
                        String fkColumnName = foreignKeys.getString("FKCOLUMN_NAME");
                        table.getFields().get(fkColumnName).setRole(Field.Role.FK);

                        foreignKeysText.append(String.format("%s::%s --> %s::%s\n", fkTableName, fkColumnName, pkTableName, pkColumnName));

                    }
                }              
                out.write(table.toString());
                out.write(foreignKeysText.toString());
            }
            
        }
        out.write("@enduml");
                  
                                    
        SourceStringReader reader = new SourceStringReader(out.toString());
        final ByteArrayOutputStream os = new ByteArrayOutputStream();

        DiagramDescription desc = reader.outputImage(os, new FileFormatOption(FileFormat.valueOf(fileFormat)));
        os.close();
        Object output;
        if (fileFormat.equals("SVG"))
            output = new String(os.toByteArray(), Charset.forName("UTF-8"));
        else
            output= ImageIO.read(new ByteArrayInputStream(os.toByteArray()));

        display(output,fileFormat.equals("SVG")?"image/svg+xml":"image/png");
        return output;
        });//%jars /usr/local/bin/plantuml.jar

import io.github.spencerpark.ijava.IJava;
import net.sourceforge.plantuml.*;
import net.sourceforge.plantuml.core.DiagramDescription;
import java.nio.charset.Charset;
import javax.imageio.ImageIO;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import io.github.spencerpark.ijava.IJava;
import io.github.spencerpark.ijava.JavaKernel;
import io.github.spencerpark.jupyter.kernel.magic.registry.UndefinedMagicException;


/**
Render plantUML from cell
*/
IJava.getKernelInstance().getMagics().registerCellMagic("plantUML", (args, body) -> {
        //sets the results mimetype
        if (args.size()>1) throw new Exception("Max one argument : SVG or PNG");
        String fileFormat;
        if (args.size()==0) fileFormat="SVG"; 
          else fileFormat=args.get(0);    
        
        SourceStringReader reader = new SourceStringReader(body);
        final ByteArrayOutputStream os = new ByteArrayOutputStream();

        DiagramDescription desc = reader.outputImage(os, new FileFormatOption(FileFormat.valueOf(fileFormat)));
        os.close();
        Object out;
        if (fileFormat.equals("SVG"))
            out = new String(os.toByteArray(), Charset.forName("UTF-8"));
        else 
            out= ImageIO.read(new ByteArrayInputStream(os.toByteArray()));
        
        display(out,fileFormat.equals("SVG")?"image/svg+xml":"image/png");
        return out;
        });

/**
Render plantUML from file
*/
IJava.getKernelInstance().getMagics().registerCellMagic("plantUMLFile", (args, body) -> {    
    //sets the results mimetype
    if (args.size()>1) throw new Exception("Max one argument : SVG or PNG");
    String fileFormat;
    if (args.size()==0) fileFormat="SVG"; 
    else fileFormat=args.get(0);
    
    List<String> l = new ArrayList<>();

    List<Object> outList = new ArrayList<>();
    body.lines().forEach(filename-> {
     Object out;        
     try {        
        out=cellMagic("plantUML",args,Files.readString(Paths.get(filename)));
        //display(out,fileFormat.equals("SVG")?"image/svg+xml":"image/png");
        outList.add(out);
     } catch (java.io.IOException e) {}
    });    
    
        return outList;
                
        });
    
