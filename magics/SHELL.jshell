import java.io.File;
import java.io.InputStream;
import java.util.function.Consumer;
import java.util.concurrent.Future;
import io.github.spencerpark.ijava.IJava;
import io.github.spencerpark.ijava.JavaKernel;
import io.github.spencerpark.jupyter.kernel.magic.registry.UndefinedMagicException;


private static class StreamGobbler implements Runnable {
    private InputStream inputStream;
    private Consumer<String> consumer;

    public StreamGobbler(InputStream inputStream, Consumer<String> consumer) {
        this.inputStream = inputStream;
        this.consumer = consumer;
    }

    @Override
    public void run() {
        new BufferedReader(new InputStreamReader(inputStream)).lines()
          .forEach(consumer);
    }
}

IJava.getKernelInstance().getMagics().registerCellMagic("shell", (args, body) -> {
    String[] commands = {"zsh", "-c", body};
    Process process = new ProcessBuilder()
        //.redirectErrorStream(true)
        .command(commands).start();

    StreamGobbler streamGobbler =
      new StreamGobbler(process.getInputStream(), System.out::println);
    StreamGobbler streamGobblerErr =
      new StreamGobbler(process.getErrorStream(), System.err::println);
    Executors.newSingleThreadExecutor().submit(streamGobbler);
    Executors.newSingleThreadExecutor().submit(streamGobblerErr);
    
    return process.waitFor();
})
